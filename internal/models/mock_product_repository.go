// Code generated by MockGen. DO NOT EDIT.
// Source: ./product_repository.go
//
// Generated by this command:
//
//	mockgen -source ./product_repository.go -destination ./mock_product_repository.go -package models
//

// Package models is a generated GoMock package.
package models

import (
	context "context"
	reflect "reflect"

	sqlutils "github.com/dhanielsales/go-api-template/pkg/sqlutils"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockProductRepository is a mock of ProductRepository interface.
type MockProductRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProductRepositoryMockRecorder
	isgomock struct{}
}

// MockProductRepositoryMockRecorder is the mock recorder for MockProductRepository.
type MockProductRepositoryMockRecorder struct {
	mock *MockProductRepository
}

// NewMockProductRepository creates a new mock instance.
func NewMockProductRepository(ctrl *gomock.Controller) *MockProductRepository {
	mock := &MockProductRepository{ctrl: ctrl}
	mock.recorder = &MockProductRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductRepository) EXPECT() *MockProductRepositoryMockRecorder {
	return m.recorder
}

// Client mocks base method.
func (m *MockProductRepository) Client() sqlutils.SQLDB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(sqlutils.SQLDB)
	return ret0
}

// Client indicates an expected call of Client.
func (mr *MockProductRepositoryMockRecorder) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockProductRepository)(nil).Client))
}

// CreateProduct mocks base method.
func (m *MockProductRepository) CreateProduct(ctx context.Context, data *Product) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", ctx, data)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockProductRepositoryMockRecorder) CreateProduct(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockProductRepository)(nil).CreateProduct), ctx, data)
}

// DeleteProduct mocks base method.
func (m *MockProductRepository) DeleteProduct(ctx context.Context, id uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", ctx, id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockProductRepositoryMockRecorder) DeleteProduct(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockProductRepository)(nil).DeleteProduct), ctx, id)
}

// GetManyProduct mocks base method.
func (m *MockProductRepository) GetManyProduct(ctx context.Context, data GetManyProductPayload) ([]*Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManyProduct", ctx, data)
	ret0, _ := ret[0].([]*Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManyProduct indicates an expected call of GetManyProduct.
func (mr *MockProductRepositoryMockRecorder) GetManyProduct(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManyProduct", reflect.TypeOf((*MockProductRepository)(nil).GetManyProduct), ctx, data)
}

// GetManyProductByCategoryID mocks base method.
func (m *MockProductRepository) GetManyProductByCategoryID(ctx context.Context, categoryID uuid.UUID) ([]*Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManyProductByCategoryID", ctx, categoryID)
	ret0, _ := ret[0].([]*Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManyProductByCategoryID indicates an expected call of GetManyProductByCategoryID.
func (mr *MockProductRepositoryMockRecorder) GetManyProductByCategoryID(ctx, categoryID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManyProductByCategoryID", reflect.TypeOf((*MockProductRepository)(nil).GetManyProductByCategoryID), ctx, categoryID)
}

// GetProductByID mocks base method.
func (m *MockProductRepository) GetProductByID(ctx context.Context, id uuid.UUID) (*Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByID", ctx, id)
	ret0, _ := ret[0].(*Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByID indicates an expected call of GetProductByID.
func (mr *MockProductRepositoryMockRecorder) GetProductByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByID", reflect.TypeOf((*MockProductRepository)(nil).GetProductByID), ctx, id)
}

// UpdateProduct mocks base method.
func (m *MockProductRepository) UpdateProduct(ctx context.Context, id uuid.UUID, data *Product) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", ctx, id, data)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockProductRepositoryMockRecorder) UpdateProduct(ctx, id, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockProductRepository)(nil).UpdateProduct), ctx, id, data)
}

// WithTx mocks base method.
func (m *MockProductRepository) WithTx(tx sqlutils.SQLTX) ProductRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", tx)
	ret0, _ := ret[0].(ProductRepository)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockProductRepositoryMockRecorder) WithTx(tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockProductRepository)(nil).WithTx), tx)
}
