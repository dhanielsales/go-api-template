// Code generated by MockGen. DO NOT EDIT.
// Source: ./category_repository.go
//
// Generated by this command:
//
//	mockgen -source ./category_repository.go -destination ./mock_category_repository.go -package models
//

// Package models is a generated GoMock package.
package models

import (
	context "context"
	reflect "reflect"
	time "time"

	sqlutils "github.com/dhanielsales/go-api-template/pkg/sqlutils"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockCategoryRepository is a mock of CategoryRepository interface.
type MockCategoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryRepositoryMockRecorder
	isgomock struct{}
}

// MockCategoryRepositoryMockRecorder is the mock recorder for MockCategoryRepository.
type MockCategoryRepositoryMockRecorder struct {
	mock *MockCategoryRepository
}

// NewMockCategoryRepository creates a new mock instance.
func NewMockCategoryRepository(ctrl *gomock.Controller) *MockCategoryRepository {
	mock := &MockCategoryRepository{ctrl: ctrl}
	mock.recorder = &MockCategoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryRepository) EXPECT() *MockCategoryRepositoryMockRecorder {
	return m.recorder
}

// Client mocks base method.
func (m *MockCategoryRepository) Client() sqlutils.SQLDB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(sqlutils.SQLDB)
	return ret0
}

// Client indicates an expected call of Client.
func (mr *MockCategoryRepositoryMockRecorder) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockCategoryRepository)(nil).Client))
}

// CreateCategory mocks base method.
func (m *MockCategoryRepository) CreateCategory(ctx context.Context, category *Category) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", ctx, category)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockCategoryRepositoryMockRecorder) CreateCategory(ctx, category any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockCategoryRepository)(nil).CreateCategory), ctx, category)
}

// DeleteAllCategoryInCache mocks base method.
func (m *MockCategoryRepository) DeleteAllCategoryInCache(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllCategoryInCache", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllCategoryInCache indicates an expected call of DeleteAllCategoryInCache.
func (mr *MockCategoryRepositoryMockRecorder) DeleteAllCategoryInCache(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllCategoryInCache", reflect.TypeOf((*MockCategoryRepository)(nil).DeleteAllCategoryInCache), ctx)
}

// DeleteCategory mocks base method.
func (m *MockCategoryRepository) DeleteCategory(ctx context.Context, id uuid.UUID) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategory", ctx, id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCategory indicates an expected call of DeleteCategory.
func (mr *MockCategoryRepositoryMockRecorder) DeleteCategory(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategory", reflect.TypeOf((*MockCategoryRepository)(nil).DeleteCategory), ctx, id)
}

// DeleteCategoryInCache mocks base method.
func (m *MockCategoryRepository) DeleteCategoryInCache(ctx context.Context, categoryID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategoryInCache", ctx, categoryID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategoryInCache indicates an expected call of DeleteCategoryInCache.
func (mr *MockCategoryRepositoryMockRecorder) DeleteCategoryInCache(ctx, categoryID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategoryInCache", reflect.TypeOf((*MockCategoryRepository)(nil).DeleteCategoryInCache), ctx, categoryID)
}

// GetCategoryByID mocks base method.
func (m *MockCategoryRepository) GetCategoryByID(ctx context.Context, id uuid.UUID) (*Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryByID", ctx, id)
	ret0, _ := ret[0].(*Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryByID indicates an expected call of GetCategoryByID.
func (mr *MockCategoryRepositoryMockRecorder) GetCategoryByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryByID", reflect.TypeOf((*MockCategoryRepository)(nil).GetCategoryByID), ctx, id)
}

// GetCategoryInCache mocks base method.
func (m *MockCategoryRepository) GetCategoryInCache(ctx context.Context, categoryID uuid.UUID) *Category {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryInCache", ctx, categoryID)
	ret0, _ := ret[0].(*Category)
	return ret0
}

// GetCategoryInCache indicates an expected call of GetCategoryInCache.
func (mr *MockCategoryRepositoryMockRecorder) GetCategoryInCache(ctx, categoryID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryInCache", reflect.TypeOf((*MockCategoryRepository)(nil).GetCategoryInCache), ctx, categoryID)
}

// GetManyCategory mocks base method.
func (m *MockCategoryRepository) GetManyCategory(ctx context.Context, data GetManyCategoryPayload) ([]*Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManyCategory", ctx, data)
	ret0, _ := ret[0].([]*Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManyCategory indicates an expected call of GetManyCategory.
func (mr *MockCategoryRepositoryMockRecorder) GetManyCategory(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManyCategory", reflect.TypeOf((*MockCategoryRepository)(nil).GetManyCategory), ctx, data)
}

// SetCategoryInCache mocks base method.
func (m *MockCategoryRepository) SetCategoryInCache(ctx context.Context, category *Category, expiration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCategoryInCache", ctx, category, expiration)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCategoryInCache indicates an expected call of SetCategoryInCache.
func (mr *MockCategoryRepositoryMockRecorder) SetCategoryInCache(ctx, category, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCategoryInCache", reflect.TypeOf((*MockCategoryRepository)(nil).SetCategoryInCache), ctx, category, expiration)
}

// UpdateCategory mocks base method.
func (m *MockCategoryRepository) UpdateCategory(ctx context.Context, id uuid.UUID, category *Category) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", ctx, id, category)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCategory indicates an expected call of UpdateCategory.
func (mr *MockCategoryRepositoryMockRecorder) UpdateCategory(ctx, id, category any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockCategoryRepository)(nil).UpdateCategory), ctx, id, category)
}

// WithTx mocks base method.
func (m *MockCategoryRepository) WithTx(tx sqlutils.SQLTX) CategoryRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", tx)
	ret0, _ := ret[0].(CategoryRepository)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockCategoryRepositoryMockRecorder) WithTx(tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockCategoryRepository)(nil).WithTx), tx)
}
