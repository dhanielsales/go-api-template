// Code generated by MockGen. DO NOT EDIT.
// Source: ./storages.go
//
// Generated by this command:
//
//	mockgen -source ./storages.go -destination ./mock_storages.go -package storages
//

// Package storages is a generated GoMock package.
package storages

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	db "github.com/dhanielsales/go-api-template/internal/modules/store/storages/gen"
	sqlutils "github.com/dhanielsales/go-api-template/pkg/sqlutils"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
	isgomock struct{}
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// CreateCategory mocks base method.
func (m *MockStorage) CreateCategory(ctx context.Context, arg db.CreateCategoryParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", ctx, arg)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockStorageMockRecorder) CreateCategory(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockStorage)(nil).CreateCategory), ctx, arg)
}

// CreateProduct mocks base method.
func (m *MockStorage) CreateProduct(ctx context.Context, arg db.CreateProductParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", ctx, arg)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockStorageMockRecorder) CreateProduct(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockStorage)(nil).CreateProduct), ctx, arg)
}

// DeleteCategory mocks base method.
func (m *MockStorage) DeleteCategory(ctx context.Context, id uuid.UUID) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategory", ctx, id)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCategory indicates an expected call of DeleteCategory.
func (mr *MockStorageMockRecorder) DeleteCategory(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategory", reflect.TypeOf((*MockStorage)(nil).DeleteCategory), ctx, id)
}

// DeleteProduct mocks base method.
func (m *MockStorage) DeleteProduct(ctx context.Context, id uuid.UUID) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", ctx, id)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockStorageMockRecorder) DeleteProduct(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockStorage)(nil).DeleteProduct), ctx, id)
}

// GetCategoryById mocks base method.
func (m *MockStorage) GetCategoryById(ctx context.Context, id uuid.UUID) (db.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryById", ctx, id)
	ret0, _ := ret[0].(db.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryById indicates an expected call of GetCategoryById.
func (mr *MockStorageMockRecorder) GetCategoryById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryById", reflect.TypeOf((*MockStorage)(nil).GetCategoryById), ctx, id)
}

// GetManyCategory mocks base method.
func (m *MockStorage) GetManyCategory(ctx context.Context, arg db.GetManyCategoryParams) ([]db.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManyCategory", ctx, arg)
	ret0, _ := ret[0].([]db.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManyCategory indicates an expected call of GetManyCategory.
func (mr *MockStorageMockRecorder) GetManyCategory(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManyCategory", reflect.TypeOf((*MockStorage)(nil).GetManyCategory), ctx, arg)
}

// GetManyProduct mocks base method.
func (m *MockStorage) GetManyProduct(ctx context.Context, arg db.GetManyProductParams) ([]db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManyProduct", ctx, arg)
	ret0, _ := ret[0].([]db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManyProduct indicates an expected call of GetManyProduct.
func (mr *MockStorageMockRecorder) GetManyProduct(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManyProduct", reflect.TypeOf((*MockStorage)(nil).GetManyProduct), ctx, arg)
}

// GetManyProductByCategoryId mocks base method.
func (m *MockStorage) GetManyProductByCategoryId(ctx context.Context, categoryID uuid.UUID) ([]db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManyProductByCategoryId", ctx, categoryID)
	ret0, _ := ret[0].([]db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManyProductByCategoryId indicates an expected call of GetManyProductByCategoryId.
func (mr *MockStorageMockRecorder) GetManyProductByCategoryId(ctx, categoryID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManyProductByCategoryId", reflect.TypeOf((*MockStorage)(nil).GetManyProductByCategoryId), ctx, categoryID)
}

// GetProductById mocks base method.
func (m *MockStorage) GetProductById(ctx context.Context, id uuid.UUID) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductById", ctx, id)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductById indicates an expected call of GetProductById.
func (mr *MockStorageMockRecorder) GetProductById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductById", reflect.TypeOf((*MockStorage)(nil).GetProductById), ctx, id)
}

// UpdateCategory mocks base method.
func (m *MockStorage) UpdateCategory(ctx context.Context, arg db.UpdateCategoryParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", ctx, arg)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCategory indicates an expected call of UpdateCategory.
func (mr *MockStorageMockRecorder) UpdateCategory(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockStorage)(nil).UpdateCategory), ctx, arg)
}

// UpdateProduct mocks base method.
func (m *MockStorage) UpdateProduct(ctx context.Context, arg db.UpdateProductParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", ctx, arg)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockStorageMockRecorder) UpdateProduct(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockStorage)(nil).UpdateProduct), ctx, arg)
}

// WithTx mocks base method.
func (m *MockStorage) WithTx(tx sqlutils.SQLTX) Storage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", tx)
	ret0, _ := ret[0].(Storage)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockStorageMockRecorder) WithTx(tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockStorage)(nil).WithTx), tx)
}
