// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: category.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createCategory = `-- name: CreateCategory :execresult
INSERT
	INTO category (id, name, slug, description, created_at)
	VALUES ($1, $2, $3, $4, $5)
`

type CreateCategoryParams struct {
	ID          uuid.UUID
	Name        string
	Slug        string
	Description sql.NullString
	CreatedAt   int64
}

func (q *Queries) CreateCategory(ctx context.Context, db DBTX, arg CreateCategoryParams) (sql.Result, error) {
	return db.ExecContext(ctx, createCategory,
		arg.ID,
		arg.Name,
		arg.Slug,
		arg.Description,
		arg.CreatedAt,
	)
}

const deleteCategory = `-- name: DeleteCategory :execresult
DELETE
	FROM category
	WHERE id = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, db DBTX, id uuid.UUID) (sql.Result, error) {
	return db.ExecContext(ctx, deleteCategory, id)
}

const getCategoryById = `-- name: GetCategoryById :one
SELECT id, name, slug, description, created_at, updated_at
	FROM category
	WHERE id = $1
`

func (q *Queries) GetCategoryById(ctx context.Context, db DBTX, id uuid.UUID) (Category, error) {
	row := db.QueryRowContext(ctx, getCategoryById, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getManyCategory = `-- name: GetManyCategory :many
SELECT id, name, slug, description, created_at, updated_at
	FROM category
	ORDER BY $1::text
	LIMIT $3::int
	OFFSET $2::int
`

type GetManyCategoryParams struct {
	OrderBy string
	Offset  int32
	Limit   int32
}

func (q *Queries) GetManyCategory(ctx context.Context, db DBTX, arg GetManyCategoryParams) ([]Category, error) {
	rows, err := db.QueryContext(ctx, getManyCategory, arg.OrderBy, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategory = `-- name: UpdateCategory :execresult
UPDATE category
	SET 
		name = $1,
		slug = $2,
		description = $3,
		updated_at = $4
	WHERE id = $5
`

type UpdateCategoryParams struct {
	Name        string
	Slug        string
	Description sql.NullString
	UpdatedAt   sql.NullInt64
	ID          uuid.UUID
}

func (q *Queries) UpdateCategory(ctx context.Context, db DBTX, arg UpdateCategoryParams) (sql.Result, error) {
	return db.ExecContext(ctx, updateCategory,
		arg.Name,
		arg.Slug,
		arg.Description,
		arg.UpdatedAt,
		arg.ID,
	)
}
