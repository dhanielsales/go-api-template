// Code generated by MockGen. DO NOT EDIT.
// Source: ./wrapper.go
//
// Generated by this command:
//
//	mockgen -source ./wrapper.go -destination ./wrapper_mock.go -package db
//

// Package db is a generated GoMock package.
package db

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockQueryWrapper is a mock of QueryWrapper interface.
type MockQueryWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockQueryWrapperMockRecorder
	isgomock struct{}
}

// MockQueryWrapperMockRecorder is the mock recorder for MockQueryWrapper.
type MockQueryWrapperMockRecorder struct {
	mock *MockQueryWrapper
}

// NewMockQueryWrapper creates a new mock instance.
func NewMockQueryWrapper(ctrl *gomock.Controller) *MockQueryWrapper {
	mock := &MockQueryWrapper{ctrl: ctrl}
	mock.recorder = &MockQueryWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryWrapper) EXPECT() *MockQueryWrapperMockRecorder {
	return m.recorder
}

// CreateCategory mocks base method.
func (m *MockQueryWrapper) CreateCategory(ctx context.Context, arg CreateCategoryParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", ctx, arg)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockQueryWrapperMockRecorder) CreateCategory(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockQueryWrapper)(nil).CreateCategory), ctx, arg)
}

// CreateProduct mocks base method.
func (m *MockQueryWrapper) CreateProduct(ctx context.Context, arg CreateProductParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", ctx, arg)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockQueryWrapperMockRecorder) CreateProduct(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockQueryWrapper)(nil).CreateProduct), ctx, arg)
}

// DeleteCategory mocks base method.
func (m *MockQueryWrapper) DeleteCategory(ctx context.Context, id uuid.UUID) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategory", ctx, id)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCategory indicates an expected call of DeleteCategory.
func (mr *MockQueryWrapperMockRecorder) DeleteCategory(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategory", reflect.TypeOf((*MockQueryWrapper)(nil).DeleteCategory), ctx, id)
}

// DeleteProduct mocks base method.
func (m *MockQueryWrapper) DeleteProduct(ctx context.Context, id uuid.UUID) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", ctx, id)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockQueryWrapperMockRecorder) DeleteProduct(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockQueryWrapper)(nil).DeleteProduct), ctx, id)
}

// GetCategoryById mocks base method.
func (m *MockQueryWrapper) GetCategoryById(ctx context.Context, id uuid.UUID) (Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryById", ctx, id)
	ret0, _ := ret[0].(Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategoryById indicates an expected call of GetCategoryById.
func (mr *MockQueryWrapperMockRecorder) GetCategoryById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryById", reflect.TypeOf((*MockQueryWrapper)(nil).GetCategoryById), ctx, id)
}

// GetManyCategory mocks base method.
func (m *MockQueryWrapper) GetManyCategory(ctx context.Context, arg GetManyCategoryParams) ([]Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManyCategory", ctx, arg)
	ret0, _ := ret[0].([]Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManyCategory indicates an expected call of GetManyCategory.
func (mr *MockQueryWrapperMockRecorder) GetManyCategory(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManyCategory", reflect.TypeOf((*MockQueryWrapper)(nil).GetManyCategory), ctx, arg)
}

// GetManyProduct mocks base method.
func (m *MockQueryWrapper) GetManyProduct(ctx context.Context, arg GetManyProductParams) ([]Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManyProduct", ctx, arg)
	ret0, _ := ret[0].([]Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManyProduct indicates an expected call of GetManyProduct.
func (mr *MockQueryWrapperMockRecorder) GetManyProduct(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManyProduct", reflect.TypeOf((*MockQueryWrapper)(nil).GetManyProduct), ctx, arg)
}

// GetManyProductByCategoryId mocks base method.
func (m *MockQueryWrapper) GetManyProductByCategoryId(ctx context.Context, categoryID uuid.UUID) ([]Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManyProductByCategoryId", ctx, categoryID)
	ret0, _ := ret[0].([]Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManyProductByCategoryId indicates an expected call of GetManyProductByCategoryId.
func (mr *MockQueryWrapperMockRecorder) GetManyProductByCategoryId(ctx, categoryID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManyProductByCategoryId", reflect.TypeOf((*MockQueryWrapper)(nil).GetManyProductByCategoryId), ctx, categoryID)
}

// GetProductById mocks base method.
func (m *MockQueryWrapper) GetProductById(ctx context.Context, id uuid.UUID) (Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductById", ctx, id)
	ret0, _ := ret[0].(Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductById indicates an expected call of GetProductById.
func (mr *MockQueryWrapperMockRecorder) GetProductById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductById", reflect.TypeOf((*MockQueryWrapper)(nil).GetProductById), ctx, id)
}

// UpdateCategory mocks base method.
func (m *MockQueryWrapper) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", ctx, arg)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCategory indicates an expected call of UpdateCategory.
func (mr *MockQueryWrapperMockRecorder) UpdateCategory(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockQueryWrapper)(nil).UpdateCategory), ctx, arg)
}

// UpdateProduct mocks base method.
func (m *MockQueryWrapper) UpdateProduct(ctx context.Context, arg UpdateProductParams) (sql.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", ctx, arg)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockQueryWrapperMockRecorder) UpdateProduct(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockQueryWrapper)(nil).UpdateProduct), ctx, arg)
}

// WithTx mocks base method.
func (m *MockQueryWrapper) WithTx(tx *sql.Tx) Querier {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", tx)
	ret0, _ := ret[0].(Querier)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockQueryWrapperMockRecorder) WithTx(tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockQueryWrapper)(nil).WithTx), tx)
}
