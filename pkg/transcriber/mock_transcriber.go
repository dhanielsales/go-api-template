// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/transcriber/transcriber.go
//
// Generated by this command:
//
//	mockgen -source ./pkg/transcriber/transcriber.go -destination ./pkg/transcriber/mock_transcriber.go -package transcriber
//

// Package transcriber is a generated GoMock package.
package transcriber

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSolver is a mock of Solver interface.
type MockSolver struct {
	ctrl     *gomock.Controller
	recorder *MockSolverMockRecorder
}

// MockSolverMockRecorder is the mock recorder for MockSolver.
type MockSolverMockRecorder struct {
	mock *MockSolver
}

// NewMockSolver creates a new mock instance.
func NewMockSolver(ctrl *gomock.Controller) *MockSolver {
	mock := &MockSolver{ctrl: ctrl}
	mock.recorder = &MockSolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSolver) EXPECT() *MockSolverMockRecorder {
	return m.recorder
}

// Validate mocks base method.
func (m *MockSolver) Validate(ctx context.Context, val any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", ctx, val)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockSolverMockRecorder) Validate(ctx, val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockSolver)(nil).Validate), ctx, val)
}

// MockTranscriber is a mock of Transcriber interface.
type MockTranscriber struct {
	ctrl     *gomock.Controller
	recorder *MockTranscriberMockRecorder
}

// MockTranscriberMockRecorder is the mock recorder for MockTranscriber.
type MockTranscriberMockRecorder struct {
	mock *MockTranscriber
}

// NewMockTranscriber creates a new mock instance.
func NewMockTranscriber(ctrl *gomock.Controller) *MockTranscriber {
	mock := &MockTranscriber{ctrl: ctrl}
	mock.recorder = &MockTranscriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTranscriber) EXPECT() *MockTranscriberMockRecorder {
	return m.recorder
}

// DecodeAndValidate mocks base method.
func (m *MockTranscriber) DecodeAndValidate(ctx context.Context, source io.Reader, target any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeAndValidate", ctx, source, target)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecodeAndValidate indicates an expected call of DecodeAndValidate.
func (mr *MockTranscriberMockRecorder) DecodeAndValidate(ctx, source, target any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeAndValidate", reflect.TypeOf((*MockTranscriber)(nil).DecodeAndValidate), ctx, source, target)
}
