// Code generated by MockGen. DO NOT EDIT.
// Source: ./validator.go
//
// Generated by this command:
//
//	mockgen -source ./validator.go -destination ./mock_validator.go -package httputils
//

// Package httputils is a generated GoMock package.
package httputils

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockValidator is a mock of Validator interface.
type MockValidator[C any] struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorMockRecorder[C]
	isgomock struct{}
}

// MockValidatorMockRecorder is the mock recorder for MockValidator.
type MockValidatorMockRecorder[C any] struct {
	mock *MockValidator[C]
}

// NewMockValidator creates a new mock instance.
func NewMockValidator[C any](ctrl *gomock.Controller) *MockValidator[C] {
	mock := &MockValidator[C]{ctrl: ctrl}
	mock.recorder = &MockValidatorMockRecorder[C]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidator[C]) EXPECT() *MockValidatorMockRecorder[C] {
	return m.recorder
}

// DecodeAndValidate mocks base method.
func (m *MockValidator[C]) DecodeAndValidate(c C, target any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeAndValidate", c, target)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecodeAndValidate indicates an expected call of DecodeAndValidate.
func (mr *MockValidatorMockRecorder[C]) DecodeAndValidate(c, target any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeAndValidate", reflect.TypeOf((*MockValidator[C])(nil).DecodeAndValidate), c, target)
}
